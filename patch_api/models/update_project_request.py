# coding: utf-8

"""
    Patch API V1

    The core API used to integrate with Patch's service  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: developers@usepatch.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from patch_api.configuration import Configuration


class UpdateProjectRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "name": "str",
        "description": "str",
        "country": "str",
        "state": "str",
        "verifier": "str",
        "type": "str",
        "standard_type": "str",
        "longitude": "str",
        "latitude": "str",
        "production": "str",
        "organization_id": "str",
    }

    attribute_map = {
        "name": "name",
        "description": "description",
        "country": "country",
        "state": "state",
        "verifier": "verifier",
        "type": "type",
        "standard_type": "standard_type",
        "longitude": "longitude",
        "latitude": "latitude",
        "production": "production",
        "organization_id": "organization_id",
    }

    def __init__(
        self,
        name=None,
        description=None,
        country=None,
        state=None,
        verifier=None,
        type=None,
        standard_type=None,
        longitude=None,
        latitude=None,
        production=None,
        organization_id=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """UpdateProjectRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._country = None
        self._state = None
        self._verifier = None
        self._type = None
        self._standard_type = None
        self._longitude = None
        self._latitude = None
        self._production = None
        self._organization_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if country is not None:
            self.country = country
        if state is not None:
            self.state = state
        if verifier is not None:
            self.verifier = verifier
        if type is not None:
            self.type = type
        if standard_type is not None:
            self.standard_type = standard_type
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        self.production = production
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def name(self):
        """Gets the name of this UpdateProjectRequest.  # noqa: E501


        :return: The name of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProjectRequest.


        :param name: The name of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateProjectRequest.  # noqa: E501


        :return: The description of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProjectRequest.


        :param description: The description of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def country(self):
        """Gets the country of this UpdateProjectRequest.  # noqa: E501


        :return: The country of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UpdateProjectRequest.


        :param country: The country of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "TJ",
            "JM",
            "HT",
            "ST",
            "MS",
            "AE",
            "PK",
            "NL",
            "LU",
            "BZ",
            "IR",
            "BO",
            "UY",
            "GH",
            "SA",
            "CI",
            "MF",
            "TF",
            "AI",
            "QA",
            "SX",
            "LY",
            "BV",
            "PG",
            "KG",
            "GQ",
            "EH",
            "NU",
            "PR",
            "GD",
            "KR",
            "HM",
            "SM",
            "SL",
            "CD",
            "MK",
            "TR",
            "DZ",
            "GE",
            "PS",
            "BB",
            "UA",
            "GP",
            "PF",
            "NA",
            "BW",
            "SY",
            "TG",
            "DO",
            "AQ",
            "CH",
            "MG",
            "FO",
            "VG",
            "GI",
            "BN",
            "LA",
            "IS",
            "EE",
            "UM",
            "LT",
            "RS",
            "MR",
            "AD",
            "HU",
            "TK",
            "MY",
            "AO",
            "CV",
            "NF",
            "PA",
            "GW",
            "BE",
            "PT",
            "GB",
            "IM",
            "US",
            "YE",
            "HK",
            "AZ",
            "CC",
            "ML",
            "SK",
            "VU",
            "TL",
            "HR",
            "SR",
            "MU",
            "CZ",
            "PM",
            "LS",
            "WS",
            "KM",
            "IT",
            "BI",
            "WF",
            "GN",
            "SG",
            "CO",
            "CN",
            "AW",
            "MA",
            "FI",
            "VA",
            "ZW",
            "KY",
            "BH",
            "PY",
            "EC",
            "LR",
            "RU",
            "PL",
            "OM",
            "MT",
            "SS",
            "DE",
            "TM",
            "SJ",
            "MM",
            "TT",
            "IL",
            "BD",
            "NR",
            "LK",
            "UG",
            "NG",
            "BQ",
            "MX",
            "CW",
            "SI",
            "MN",
            "CA",
            "AX",
            "VN",
            "TW",
            "JP",
            "IO",
            "RO",
            "BG",
            "GU",
            "BR",
            "AM",
            "ZM",
            "DJ",
            "JE",
            "AT",
            "CM",
            "SE",
            "FJ",
            "KZ",
            "GL",
            "GY",
            "CX",
            "MW",
            "TN",
            "ZA",
            "TO",
            "CY",
            "MV",
            "PN",
            "RW",
            "NI",
            "KN",
            "BJ",
            "ET",
            "GM",
            "TZ",
            "VC",
            "FK",
            "SD",
            "MC",
            "AU",
            "CL",
            "DK",
            "FR",
            "TC",
            "CU",
            "AL",
            "MZ",
            "BS",
            "NE",
            "GT",
            "LI",
            "NP",
            "BF",
            "PW",
            "KW",
            "IN",
            "GA",
            "TV",
            "MO",
            "SH",
            "MD",
            "CK",
            "AR",
            "SC",
            "IE",
            "ES",
            "LB",
            "BM",
            "RE",
            "KI",
            "AG",
            "MQ",
            "SV",
            "JO",
            "TH",
            "SO",
            "MH",
            "CG",
            "KP",
            "GF",
            "BA",
            "YT",
            "GS",
            "KE",
            "PE",
            "BT",
            "SZ",
            "CR",
            "TD",
            "DM",
            "NC",
            "GR",
            "GG",
            "HN",
            "VI",
            "CF",
            "SN",
            "AF",
            "MP",
            "PH",
            "BY",
            "LV",
            "NO",
            "EG",
            "KH",
            "IQ",
            "LC",
            "NZ",
            "BL",
            "UZ",
            "ID",
            "ER",
            "VE",
            "FM",
            "SB",
            "ME",
            "AS",
        ]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and country not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}".format(  # noqa: E501
                    country, allowed_values
                )
            )

        self._country = country

    @property
    def state(self):
        """Gets the state of this UpdateProjectRequest.  # noqa: E501


        :return: The state of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateProjectRequest.


        :param state: The state of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def verifier(self):
        """Gets the verifier of this UpdateProjectRequest.  # noqa: E501


        :return: The verifier of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._verifier

    @verifier.setter
    def verifier(self, verifier):
        """Sets the verifier of this UpdateProjectRequest.


        :param verifier: The verifier of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._verifier = verifier

    @property
    def type(self):
        """Gets the type of this UpdateProjectRequest.  # noqa: E501


        :return: The type of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateProjectRequest.


        :param type: The type of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "biomass",
            "dac",
            "forestry",
            "mineralization",
            "ocean",
            "soil",
        ]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and type not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
                    type, allowed_values
                )
            )

        self._type = type

    @property
    def standard_type(self):
        """Gets the standard_type of this UpdateProjectRequest.  # noqa: E501


        :return: The standard_type of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._standard_type

    @standard_type.setter
    def standard_type(self, standard_type):
        """Sets the standard_type of this UpdateProjectRequest.


        :param standard_type: The standard_type of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "american_carbon_registry",
            "climate_action_reserve",
            "verified_carbon_standard",
            "european_biochar_certificate",
        ]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and standard_type not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `standard_type` ({0}), must be one of {1}".format(  # noqa: E501
                    standard_type, allowed_values
                )
            )

        self._standard_type = standard_type

    @property
    def longitude(self):
        """Gets the longitude of this UpdateProjectRequest.  # noqa: E501


        :return: The longitude of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this UpdateProjectRequest.


        :param longitude: The longitude of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this UpdateProjectRequest.  # noqa: E501


        :return: The latitude of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this UpdateProjectRequest.


        :param latitude: The latitude of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def production(self):
        """Gets the production of this UpdateProjectRequest.  # noqa: E501


        :return: The production of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this UpdateProjectRequest.


        :param production: The production of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._production = production

    @property
    def organization_id(self):
        """Gets the organization_id of this UpdateProjectRequest.  # noqa: E501


        :return: The organization_id of this UpdateProjectRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this UpdateProjectRequest.


        :param organization_id: The organization_id of this UpdateProjectRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProjectRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateProjectRequest):
            return True

        return self.to_dict() != other.to_dict()
