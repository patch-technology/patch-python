# coding: utf-8

"""
    Patch API V2

    The core API used to integrate with Patch's service  # noqa: E501

    The version of the OpenAPI document: 2
    Contact: engineering@usepatch.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from patch_api.configuration import Configuration


class Disclaimer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "body": "str",
        "header": "str",
        "severity": "str",
        "link_text": "str",
        "link_destination": "str",
    }

    attribute_map = {
        "body": "body",
        "header": "header",
        "severity": "severity",
        "link_text": "link_text",
        "link_destination": "link_destination",
    }

    def __init__(
        self,
        body=None,
        header=None,
        severity=None,
        link_text=None,
        link_destination=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Disclaimer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._body = None
        self._header = None
        self._severity = None
        self._link_text = None
        self._link_destination = None
        self.discriminator = None

        self.body = body
        self.header = header
        self.severity = severity
        self.link_text = link_text
        self.link_destination = link_destination

    @property
    def body(self):
        """Gets the body of this Disclaimer.  # noqa: E501

        The body of the disclaimer.  # noqa: E501

        :return: The body of this Disclaimer.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Disclaimer.

        The body of the disclaimer.  # noqa: E501

        :param body: The body of this Disclaimer.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def header(self):
        """Gets the header of this Disclaimer.  # noqa: E501

        The header for the disclaimer.  # noqa: E501

        :return: The header of this Disclaimer.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Disclaimer.

        The header for the disclaimer.  # noqa: E501

        :param header: The header of this Disclaimer.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and header is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `header`, must not be `None`"
            )  # noqa: E501

        self._header = header

    @property
    def severity(self):
        """Gets the severity of this Disclaimer.  # noqa: E501

        The severity of the disclaimer.  # noqa: E501

        :return: The severity of this Disclaimer.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Disclaimer.

        The severity of the disclaimer.  # noqa: E501

        :param severity: The severity of this Disclaimer.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and severity is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `severity`, must not be `None`"
            )  # noqa: E501

        self._severity = severity

    @property
    def link_text(self):
        """Gets the link_text of this Disclaimer.  # noqa: E501

        The text for the provided link.  # noqa: E501

        :return: The link_text of this Disclaimer.  # noqa: E501
        :rtype: str
        """
        return self._link_text

    @link_text.setter
    def link_text(self, link_text):
        """Sets the link_text of this Disclaimer.

        The text for the provided link.  # noqa: E501

        :param link_text: The link_text of this Disclaimer.  # noqa: E501
        :type: str
        """

        self._link_text = link_text

    @property
    def link_destination(self):
        """Gets the link_destination of this Disclaimer.  # noqa: E501

        The destination of the provided link.  # noqa: E501

        :return: The link_destination of this Disclaimer.  # noqa: E501
        :rtype: str
        """
        return self._link_destination

    @link_destination.setter
    def link_destination(self, link_destination):
        """Sets the link_destination of this Disclaimer.

        The destination of the provided link.  # noqa: E501

        :param link_destination: The link_destination of this Disclaimer.  # noqa: E501
        :type: str
        """

        self._link_destination = link_destination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disclaimer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Disclaimer):
            return True

        return self.to_dict() != other.to_dict()
