# coding: utf-8

"""
    Patch API V1

    The core API used to integrate with Patch's service  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: developers@usepatch.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from patch_api.configuration import Configuration


class Offset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "id": "str",
        "allocated_mass_g": "int",
        "fulfilled_at": "str",
        "fulfillment_state": "str",
        "mass_g": "int",
        "price_cents_usd": "str",
        "production": "bool",
        "retired": "bool",
        "serial_number": "str",
        "vintage_year": "int",
        "project_id": "str",
    }

    attribute_map = {
        "id": "id",
        "allocated_mass_g": "allocated_mass_g",
        "fulfilled_at": "fulfilled_at",
        "fulfillment_state": "fulfillment_state",
        "mass_g": "mass_g",
        "price_cents_usd": "price_cents_usd",
        "production": "production",
        "retired": "retired",
        "serial_number": "serial_number",
        "vintage_year": "vintage_year",
        "project_id": "project_id",
    }

    def __init__(
        self,
        id=None,
        allocated_mass_g=None,
        fulfilled_at=None,
        fulfillment_state=None,
        mass_g=None,
        price_cents_usd=None,
        production=None,
        retired=None,
        serial_number=None,
        vintage_year=None,
        project_id=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Offset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._allocated_mass_g = None
        self._fulfilled_at = None
        self._fulfillment_state = None
        self._mass_g = None
        self._price_cents_usd = None
        self._production = None
        self._retired = None
        self._serial_number = None
        self._vintage_year = None
        self._project_id = None
        self.discriminator = None

        self.id = id
        self.allocated_mass_g = allocated_mass_g
        self.fulfilled_at = fulfilled_at
        self.fulfillment_state = fulfillment_state
        self.mass_g = mass_g
        self.price_cents_usd = price_cents_usd
        self.production = production
        self.retired = retired
        self.serial_number = serial_number
        self.vintage_year = vintage_year
        self.project_id = project_id

    @property
    def id(self):
        """Gets the id of this Offset.  # noqa: E501

        A unique uid for the record. UIDs will be prepended by off_prod or off_test depending on the mode it was created in.  # noqa: E501

        :return: The id of this Offset.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Offset.

        A unique uid for the record. UIDs will be prepended by off_prod or off_test depending on the mode it was created in.  # noqa: E501

        :param id: The id of this Offset.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and id is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def allocated_mass_g(self):
        """Gets the allocated_mass_g of this Offset.  # noqa: E501

        The amount of carbon offset mass in grams already allocated from this offset.  # noqa: E501

        :return: The allocated_mass_g of this Offset.  # noqa: E501
        :rtype: int
        """
        return self._allocated_mass_g

    @allocated_mass_g.setter
    def allocated_mass_g(self, allocated_mass_g):
        """Sets the allocated_mass_g of this Offset.

        The amount of carbon offset mass in grams already allocated from this offset.  # noqa: E501

        :param allocated_mass_g: The allocated_mass_g of this Offset.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and allocated_mass_g is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `allocated_mass_g`, must not be `None`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and allocated_mass_g is not None
            and allocated_mass_g > 1000000000
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `allocated_mass_g`, must be a value less than or equal to `1000000000`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and allocated_mass_g is not None
            and allocated_mass_g < 0
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `allocated_mass_g`, must be a value greater than or equal to `0`"
            )  # noqa: E501

        self._allocated_mass_g = allocated_mass_g

    @property
    def fulfilled_at(self):
        """Gets the fulfilled_at of this Offset.  # noqa: E501

        The date in which the orders allocated to this offset were fulfilled.  # noqa: E501

        :return: The fulfilled_at of this Offset.  # noqa: E501
        :rtype: str
        """
        return self._fulfilled_at

    @fulfilled_at.setter
    def fulfilled_at(self, fulfilled_at):
        """Sets the fulfilled_at of this Offset.

        The date in which the orders allocated to this offset were fulfilled.  # noqa: E501

        :param fulfilled_at: The fulfilled_at of this Offset.  # noqa: E501
        :type: str
        """

        self._fulfilled_at = fulfilled_at

    @property
    def fulfillment_state(self):
        """Gets the fulfillment_state of this Offset.  # noqa: E501

        The current fulfillment state of the offset.  # noqa: E501

        :return: The fulfillment_state of this Offset.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_state

    @fulfillment_state.setter
    def fulfillment_state(self, fulfillment_state):
        """Sets the fulfillment_state of this Offset.

        The current fulfillment state of the offset.  # noqa: E501

        :param fulfillment_state: The fulfillment_state of this Offset.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and fulfillment_state is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `fulfillment_state`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["pending", "fulfilled"]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and fulfillment_state not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `fulfillment_state` ({0}), must be one of {1}".format(  # noqa: E501
                    fulfillment_state, allowed_values
                )
            )

        self._fulfillment_state = fulfillment_state

    @property
    def mass_g(self):
        """Gets the mass_g of this Offset.  # noqa: E501

        The amount of carbon offsets in grams for this offset.  # noqa: E501

        :return: The mass_g of this Offset.  # noqa: E501
        :rtype: int
        """
        return self._mass_g

    @mass_g.setter
    def mass_g(self, mass_g):
        """Sets the mass_g of this Offset.

        The amount of carbon offsets in grams for this offset.  # noqa: E501

        :param mass_g: The mass_g of this Offset.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and mass_g is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `mass_g`, must not be `None`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and mass_g is not None
            and mass_g > 1000000000
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `mass_g`, must be a value less than or equal to `1000000000`"
            )  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and mass_g is not None
            and mass_g < 1
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `mass_g`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._mass_g = mass_g

    @property
    def price_cents_usd(self):
        """Gets the price_cents_usd of this Offset.  # noqa: E501

        The total price in cents USD of this carbon offset.  # noqa: E501

        :return: The price_cents_usd of this Offset.  # noqa: E501
        :rtype: str
        """
        return self._price_cents_usd

    @price_cents_usd.setter
    def price_cents_usd(self, price_cents_usd):
        """Sets the price_cents_usd of this Offset.

        The total price in cents USD of this carbon offset.  # noqa: E501

        :param price_cents_usd: The price_cents_usd of this Offset.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and price_cents_usd is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `price_cents_usd`, must not be `None`"
            )  # noqa: E501

        self._price_cents_usd = price_cents_usd

    @property
    def production(self):
        """Gets the production of this Offset.  # noqa: E501

        A boolean indicating if this offset is a production or test mode offset.  # noqa: E501

        :return: The production of this Offset.  # noqa: E501
        :rtype: bool
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this Offset.

        A boolean indicating if this offset is a production or test mode offset.  # noqa: E501

        :param production: The production of this Offset.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation and production is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `production`, must not be `None`"
            )  # noqa: E501

        self._production = production

    @property
    def retired(self):
        """Gets the retired of this Offset.  # noqa: E501


        :return: The retired of this Offset.  # noqa: E501
        :rtype: bool
        """
        return self._retired

    @retired.setter
    def retired(self, retired):
        """Sets the retired of this Offset.


        :param retired: The retired of this Offset.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation and retired is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `retired`, must not be `None`"
            )  # noqa: E501

        self._retired = retired

    @property
    def serial_number(self):
        """Gets the serial_number of this Offset.  # noqa: E501

        The serial number for this offset.  # noqa: E501

        :return: The serial_number of this Offset.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Offset.

        The serial number for this offset.  # noqa: E501

        :param serial_number: The serial_number of this Offset.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def vintage_year(self):
        """Gets the vintage_year of this Offset.  # noqa: E501


        :return: The vintage_year of this Offset.  # noqa: E501
        :rtype: int
        """
        return self._vintage_year

    @vintage_year.setter
    def vintage_year(self, vintage_year):
        """Sets the vintage_year of this Offset.


        :param vintage_year: The vintage_year of this Offset.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and vintage_year is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `vintage_year`, must not be `None`"
            )  # noqa: E501

        self._vintage_year = vintage_year

    @property
    def project_id(self):
        """Gets the project_id of this Offset.  # noqa: E501


        :return: The project_id of this Offset.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Offset.


        :param project_id: The project_id of this Offset.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and project_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `project_id`, must not be `None`"
            )  # noqa: E501

        self._project_id = project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Offset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Offset):
            return True

        return self.to_dict() != other.to_dict()
