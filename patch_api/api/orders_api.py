"""
    Patch API V1

    The core API used to integrate with Patch's service  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: engineering@usepatch.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from patch_api.api_client import ApiClient, Endpoint as _Endpoint
from patch_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)
from patch_api.model.create_order_request import CreateOrderRequest
from patch_api.model.error_response import ErrorResponse
from patch_api.model.order_list_response import OrderListResponse
from patch_api.model.order_response import OrderResponse


class OrdersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.cancel_order_endpoint = _Endpoint(
            settings={
                "response_type": (OrderResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/orders/{id}/cancel",
                "operation_id": "cancel_order",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (str,),
                },
                "attribute_map": {
                    "id": "id",
                },
                "location_map": {
                    "id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.create_order_endpoint = _Endpoint(
            settings={
                "response_type": (OrderResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/orders",
                "operation_id": "create_order",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_order_request",
                ],
                "required": [
                    "create_order_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_order_request": (CreateOrderRequest,),
                },
                "attribute_map": {},
                "location_map": {
                    "create_order_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.place_order_endpoint = _Endpoint(
            settings={
                "response_type": (OrderResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/orders/{id}/place",
                "operation_id": "place_order",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (str,),
                },
                "attribute_map": {
                    "id": "id",
                },
                "location_map": {
                    "id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_order_endpoint = _Endpoint(
            settings={
                "response_type": (OrderResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/orders/{id}",
                "operation_id": "retrieve_order",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (str,),
                },
                "attribute_map": {
                    "id": "id",
                },
                "location_map": {
                    "id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_orders_endpoint = _Endpoint(
            settings={
                "response_type": (OrderListResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/orders",
                "operation_id": "retrieve_orders",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "page",
                    "metadata",
                    "metadata_example1",
                    "metadata_example2",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "page": (int,),
                    "metadata": (str,),
                    "metadata_example1": (str,),
                    "metadata_example2": (str,),
                },
                "attribute_map": {
                    "page": "page",
                    "metadata": "metadata",
                    "metadata_example1": "metadata[example1]",
                    "metadata_example2": "metadata[example2]",
                },
                "location_map": {
                    "page": "query",
                    "metadata": "query",
                    "metadata_example1": "query",
                    "metadata_example2": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def cancel_order(self, id, **kwargs):
        """Cancel an order  # noqa: E501

        Cancelling an order removes the associated offset allocation from an order. You will not be charged for cancelled orders. Only orders in the `draft` or `placed` state can be cancelled.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_order(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OrderResponse
                If the method is called asynchronously, returns the request
                thread.
        """

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["id"] = id
        return self.cancel_order_endpoint.call_with_http_info(**args)

    def create_order(self, **kwargs):
        """Creates an order  # noqa: E501

        Creates an order in the `placed` state. To create a `draft` order, create an estimate first.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_order(create_order_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_order_request (CreateOrderRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OrderResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        create_order_request = CreateOrderRequest(**kwargs)

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["create_order_request"] = create_order_request
        return self.create_order_endpoint.call_with_http_info(**args)

    def place_order(self, id, **kwargs):
        """Place an order  # noqa: E501

        Placing an order confirms an order's allocation of offsets. Only orders that are in the `draft` state can be placed   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.place_order(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OrderResponse
                If the method is called asynchronously, returns the request
                thread.
        """

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["id"] = id
        return self.place_order_endpoint.call_with_http_info(**args)

    def retrieve_order(self, id, **kwargs):
        """Retrieves an order  # noqa: E501

        Retrieves a given order and its allocation offsets or negative emissions. You can only retrieve orders associated with the organization you are querying for.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_order(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OrderResponse
                If the method is called asynchronously, returns the request
                thread.
        """

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["id"] = id
        return self.retrieve_order_endpoint.call_with_http_info(**args)

    def retrieve_orders(self, **kwargs):
        """Retrieves a list of orders  # noqa: E501

        Retrieves a list of orders and its allocation offsets or negative emissions. You can only retrieve orders associated with the organization you are querying for.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_orders(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): [optional]
            metadata (str): [optional]
            metadata_example1 (str): [optional]
            metadata_example2 (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            OrderListResponse
                If the method is called asynchronously, returns the request
                thread.
        """

        args = {}
        if kwargs.get("page"):
            args["page"] = kwargs.get("page")
        if kwargs.get("metadata"):
            args["metadata"] = kwargs.get("metadata")
        if kwargs.get("metadata_example1"):
            args["metadata_example1"] = kwargs.get("metadata_example1")
        if kwargs.get("metadata_example2"):
            args["metadata_example2"] = kwargs.get("metadata_example2")

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        return self.retrieve_orders_endpoint.call_with_http_info(**args)
