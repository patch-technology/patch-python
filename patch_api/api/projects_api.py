"""
    Patch API V1

    The core API used to integrate with Patch's service  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: engineering@usepatch.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from patch_api.api_client import ApiClient, Endpoint as _Endpoint
from patch_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)
from patch_api.model.error_response import ErrorResponse
from patch_api.model.project_list_response import ProjectListResponse
from patch_api.model.project_response import ProjectResponse


class ProjectsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.retrieve_project_endpoint = _Endpoint(
            settings={
                "response_type": (ProjectResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/projects/{id}",
                "operation_id": "retrieve_project",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (str,),
                },
                "attribute_map": {
                    "id": "id",
                },
                "location_map": {
                    "id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_projects_endpoint = _Endpoint(
            settings={
                "response_type": (ProjectListResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/projects",
                "operation_id": "retrieve_projects",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "page",
                    "country",
                    "type",
                    "minimum_available_mass",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "page": (int,),
                    "country": (str,),
                    "type": (str,),
                    "minimum_available_mass": (int,),
                },
                "attribute_map": {
                    "page": "page",
                    "country": "country",
                    "type": "type",
                    "minimum_available_mass": "minimum_available_mass",
                },
                "location_map": {
                    "page": "query",
                    "country": "query",
                    "type": "query",
                    "minimum_available_mass": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def retrieve_project(self, id, **kwargs):
        """Retrieves a project  # noqa: E501

        Retrieves a project available on Patch's platform.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_project(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProjectResponse
                If the method is called asynchronously, returns the request
                thread.
        """

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["id"] = id
        return self.retrieve_project_endpoint.call_with_http_info(**args)

    def retrieve_projects(self, **kwargs):
        """Retrieves a list of projects  # noqa: E501

        Retrieves a list of projects available for purchase on Patch's platform.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_projects(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): [optional]
            country (str): [optional]
            type (str): [optional]
            minimum_available_mass (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProjectListResponse
                If the method is called asynchronously, returns the request
                thread.
        """

        args = {}
        if kwargs.get("page"):
            args["page"] = kwargs.get("page")
        if kwargs.get("country"):
            args["country"] = kwargs.get("country")
        if kwargs.get("type"):
            args["type"] = kwargs.get("type")
        if kwargs.get("minimum_available_mass"):
            args["minimum_available_mass"] = kwargs.get("minimum_available_mass")

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        return self.retrieve_projects_endpoint.call_with_http_info(**args)
