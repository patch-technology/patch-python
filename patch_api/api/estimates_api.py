"""
    Patch API V1

    The core API used to integrate with Patch's service  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: engineering@usepatch.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from patch_api.api_client import ApiClient, Endpoint as _Endpoint
from patch_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)
from patch_api.model.create_bitcoin_estimate_request import CreateBitcoinEstimateRequest
from patch_api.model.create_ethereum_estimate_request import (
    CreateEthereumEstimateRequest,
)
from patch_api.model.create_flight_estimate_request import CreateFlightEstimateRequest
from patch_api.model.create_mass_estimate_request import CreateMassEstimateRequest
from patch_api.model.create_shipping_estimate_request import (
    CreateShippingEstimateRequest,
)
from patch_api.model.create_vehicle_estimate_request import CreateVehicleEstimateRequest
from patch_api.model.error_response import ErrorResponse
from patch_api.model.estimate_list_response import EstimateListResponse
from patch_api.model.estimate_response import EstimateResponse


class EstimatesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_bitcoin_estimate_endpoint = _Endpoint(
            settings={
                "response_type": (EstimateResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/estimates/crypto/btc",
                "operation_id": "create_bitcoin_estimate",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_bitcoin_estimate_request",
                ],
                "required": [
                    "create_bitcoin_estimate_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_bitcoin_estimate_request": (CreateBitcoinEstimateRequest,),
                },
                "attribute_map": {},
                "location_map": {
                    "create_bitcoin_estimate_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.create_ethereum_estimate_endpoint = _Endpoint(
            settings={
                "response_type": (EstimateResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/estimates/crypto/eth",
                "operation_id": "create_ethereum_estimate",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_ethereum_estimate_request",
                ],
                "required": [
                    "create_ethereum_estimate_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_ethereum_estimate_request": (
                        CreateEthereumEstimateRequest,
                    ),
                },
                "attribute_map": {},
                "location_map": {
                    "create_ethereum_estimate_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.create_flight_estimate_endpoint = _Endpoint(
            settings={
                "response_type": (EstimateResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/estimates/flight",
                "operation_id": "create_flight_estimate",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_flight_estimate_request",
                ],
                "required": [
                    "create_flight_estimate_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_flight_estimate_request": (CreateFlightEstimateRequest,),
                },
                "attribute_map": {},
                "location_map": {
                    "create_flight_estimate_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.create_mass_estimate_endpoint = _Endpoint(
            settings={
                "response_type": (EstimateResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/estimates/mass",
                "operation_id": "create_mass_estimate",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_mass_estimate_request",
                ],
                "required": [
                    "create_mass_estimate_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_mass_estimate_request": (CreateMassEstimateRequest,),
                },
                "attribute_map": {},
                "location_map": {
                    "create_mass_estimate_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.create_shipping_estimate_endpoint = _Endpoint(
            settings={
                "response_type": (EstimateResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/estimates/shipping",
                "operation_id": "create_shipping_estimate",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_shipping_estimate_request",
                ],
                "required": [
                    "create_shipping_estimate_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_shipping_estimate_request": (
                        CreateShippingEstimateRequest,
                    ),
                },
                "attribute_map": {},
                "location_map": {
                    "create_shipping_estimate_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.create_vehicle_estimate_endpoint = _Endpoint(
            settings={
                "response_type": (EstimateResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/estimates/vehicle",
                "operation_id": "create_vehicle_estimate",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "create_vehicle_estimate_request",
                ],
                "required": [
                    "create_vehicle_estimate_request",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "create_vehicle_estimate_request": (CreateVehicleEstimateRequest,),
                },
                "attribute_map": {},
                "location_map": {
                    "create_vehicle_estimate_request": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.retrieve_estimate_endpoint = _Endpoint(
            settings={
                "response_type": (EstimateResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/estimates/{id}",
                "operation_id": "retrieve_estimate",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "id",
                ],
                "required": [
                    "id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "id": (str,),
                },
                "attribute_map": {
                    "id": "id",
                },
                "location_map": {
                    "id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.retrieve_estimates_endpoint = _Endpoint(
            settings={
                "response_type": (EstimateListResponse,),
                "auth": ["bearer_auth"],
                "endpoint_path": "/v1/estimates",
                "operation_id": "retrieve_estimates",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "page",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "page": (int,),
                },
                "attribute_map": {
                    "page": "page",
                },
                "location_map": {
                    "page": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def create_bitcoin_estimate(self, **kwargs):
        """Create a bitcoin estimate given a timestamp and transaction value  # noqa: E501

        Creates a bitcoin estimate for the amount of CO2 to be compensated. An order in the `draft` state may be created based on the parameters, linked to the estimate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_bitcoin_estimate(create_bitcoin_estimate_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_bitcoin_estimate_request (CreateBitcoinEstimateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EstimateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        create_bitcoin_estimate_request = CreateBitcoinEstimateRequest(**kwargs)

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["create_bitcoin_estimate_request"] = create_bitcoin_estimate_request
        return self.create_bitcoin_estimate_endpoint.call_with_http_info(**args)

    def create_ethereum_estimate(self, **kwargs):
        """Create an ethereum estimate  # noqa: E501

        Creates an ethereum estimate for the amount of CO2 to be compensated. An order in the `draft` state may be created based on the parameters, linked to the estimate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_ethereum_estimate(create_ethereum_estimate_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_ethereum_estimate_request (CreateEthereumEstimateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EstimateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        create_ethereum_estimate_request = CreateEthereumEstimateRequest(**kwargs)

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["create_ethereum_estimate_request"] = create_ethereum_estimate_request
        return self.create_ethereum_estimate_endpoint.call_with_http_info(**args)

    def create_flight_estimate(self, **kwargs):
        """Create a flight estimate given the distance traveled in meters  # noqa: E501

        Creates a flight estimate for the amount of CO2 to be compensated. An order in the `draft` state may be created based on the parameters, linked to the estimate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_flight_estimate(create_flight_estimate_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_flight_estimate_request (CreateFlightEstimateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EstimateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        create_flight_estimate_request = CreateFlightEstimateRequest(**kwargs)

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["create_flight_estimate_request"] = create_flight_estimate_request
        return self.create_flight_estimate_endpoint.call_with_http_info(**args)

    def create_mass_estimate(self, **kwargs):
        """Create an estimate based on mass of CO2  # noqa: E501

        Creates an estimate for the mass of CO2 to be compensated. An order in the `draft` state will also be created, linked to the estimate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_mass_estimate(create_mass_estimate_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_mass_estimate_request (CreateMassEstimateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EstimateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        create_mass_estimate_request = CreateMassEstimateRequest(**kwargs)

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["create_mass_estimate_request"] = create_mass_estimate_request
        return self.create_mass_estimate_endpoint.call_with_http_info(**args)

    def create_shipping_estimate(self, **kwargs):
        """Create a shipping estimate given the distance traveled in meters, package weight, and transportation method.  # noqa: E501

        Creates a shipping estimate for the amount of CO2 to be compensated. An order in the `draft` state may be created based on the parameters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shipping_estimate(create_shipping_estimate_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_shipping_estimate_request (CreateShippingEstimateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EstimateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        create_shipping_estimate_request = CreateShippingEstimateRequest(**kwargs)

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["create_shipping_estimate_request"] = create_shipping_estimate_request
        return self.create_shipping_estimate_endpoint.call_with_http_info(**args)

    def create_vehicle_estimate(self, **kwargs):
        """Create a vehicle estimate given the distance traveled in meters and the type of vehicle  # noqa: E501

        Creates an estimate and calculates the amount of CO2 to be compensated depending on the distance and the vehicle. An order in the `draft` state may be created based on the parameters, linked to the estimate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_vehicle_estimate(create_vehicle_estimate_request, async_req=True)
        >>> result = thread.get()

        Args:
            create_vehicle_estimate_request (CreateVehicleEstimateRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EstimateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        create_vehicle_estimate_request = CreateVehicleEstimateRequest(**kwargs)

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["create_vehicle_estimate_request"] = create_vehicle_estimate_request
        return self.create_vehicle_estimate_endpoint.call_with_http_info(**args)

    def retrieve_estimate(self, id, **kwargs):
        """Retrieves an estimate  # noqa: E501

        Retrieves a given estimate and its associated order. You can only retrieve estimates associated with the organization you are querying for.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_estimate(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EstimateResponse
                If the method is called asynchronously, returns the request
                thread.
        """

        args = {}

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        args["id"] = id
        return self.retrieve_estimate_endpoint.call_with_http_info(**args)

    def retrieve_estimates(self, **kwargs):
        """Retrieves a list of estimates  # noqa: E501

        Retrieves a list of estimates and their associated orders. You can only retrieve estimates associated with the organization you are querying for.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_estimates(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            page (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EstimateListResponse
                If the method is called asynchronously, returns the request
                thread.
        """

        args = {}
        if kwargs.get("page"):
            args["page"] = kwargs.get("page")

        args["async_req"] = kwargs.get("async_req", False)
        args["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        args["_preload_content"] = kwargs.get("_preload_content", True)
        args["_request_timeout"] = kwargs.get("_request_timeout", None)
        args["_check_input_type"] = kwargs.get("_check_input_type", True)
        args["_check_return_type"] = kwargs.get("_check_return_type", True)
        args["_content_type"] = kwargs.get("_content_type")
        args["_host_index"] = kwargs.get("_host_index")

        return self.retrieve_estimates_endpoint.call_with_http_info(**args)
